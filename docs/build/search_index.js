var documenterSearchIndex = {"docs":
[{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html#Problems","page":"API","title":"Problems","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"LagrangianDescriptors.augmentprob","category":"page"},{"location":"api.html#LagrangianDescriptors.augmentprob","page":"API","title":"LagrangianDescriptors.augmentprob","text":"augmentprob(prob::ODEProblem, M; direction::Symbol=:both\n\nCreate an augmented ODEProblem by aggregating the forward and backward Lagrangian descriptors to the given ODEProblem.\n\nMore precisely, with given f = prob.f and u0 = prob.u0 and tspan = prob.tspan, an augmented ODEProblem is that solves the forward and backward ODE and the forward and backward Lagrangian descriptors simultaneously.\n\nThe (global) Lagrangian descriptors are based on the provided local descriptor M=M(du, u, p, t). The (forward/backward) Lagrangian descriptor is the time-integration of the local descriptor along the (forward/backward) trajectory.\n\nIf direction=:forward or direction=:backward are given, then only the forward or backard problem is constructed in the augmented system. The default is direction=:both, where both directions are considered.\n\n\n\n\n\n","category":"function"},{"location":"api.html","page":"API","title":"API","text":"LagrangianDescriptors.LagrangianDescriptorProblem","category":"page"},{"location":"api.html#LagrangianDescriptors.LagrangianDescriptorProblem","page":"API","title":"LagrangianDescriptors.LagrangianDescriptorProblem","text":"LagrangianDescriptorProblem\n\nDefines a Lagrangian descriptor problem associated with a SciML differential equations problem.\n\nConstructor\n\nLagrangianDescriptorProblem(prob, M, uu0; direction=:both)\n\nLagrangianDescriptorProblem can be constructed by passing a differential equation problem (currently only ODEProblem, but more problem types will be added), an infinitesimal Lagrangian descriptor with arguments compatible with the differential equation problem, an array of initial conditions, and, optionally, the direction of the flow.\n\nArguments\n\nprob: the differential equation problem (e.g. ODEProblem, SDEProblem, RODEProblem, etc.).\nM: infinitesimal Lagrangian descriptor (e.g. M=M(du, u, t, p) for an ODEProblem).\nuu0: collection of initial conditions.\ndirection: the direction of the flow, with default :both, but also accepting :forward and :backward.\n\nFields\n\nWith the given arguments, the constructor for LagrangianDescriptorProblem returns a type with the following arguments:\n\nensprob::T1: a suitable ensemble problem to be solved with the given collection of initial conditions uu0 for each solve, with a suitable prob_func to iterate through the collection and a suitable output_func to only collect the Lagrangian descriptors at the end of the time interval.\nuu0::T2: the given collection of initial conditions.\ndirection::T3: the given or the default direction of the flow.\n\nExample Problems\n\nusing OrdinaryDiffEq\nusing LinearAlgebra: norm\nusing LagrangianDescriptors\n\nfunction f!(du, u, p, t)\n    x, y = u\n    A, ω = p\n    du[1] = y\n    du[2] = x - x^3 + A * cos(ω * t)\nend\n\nu0 = [0.5, 2.2]\ntspan = (0.0, 13.0)\nA = 0.3; ω = π; p = (A, ω)\n\nprob = ODEProblem(f!, u0, tspan, p)\n\nM(du, u, p, t) = norm(du)\n\nuu0 = [[x, y] for y in range(-1.0, 1.0, length=301), x in range(-1.8, 1.8, length=301)]\n\nlagprob = LagrangianDescriptorProblem(prob, M, uu0)\n\nlagsol = solve(lagprob, Tsit5())\n\nplot(lagsol)\n\n\n\n\n\n","category":"type"},{"location":"api.html#Solutions","page":"API","title":"Solutions","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"LagrangianDescriptors.LagrangianDescriptorSolution","category":"page"},{"location":"api.html#LagrangianDescriptors.LagrangianDescriptorSolution","page":"API","title":"LagrangianDescriptors.LagrangianDescriptorSolution","text":"struct LagrangianDescriptorSolution{T1, T2, T3}     enssol::T1     uu0::T2     direction::T3 end\n\nRepresentation of the solution to a LagrangianDescriptorProblem.\n\nFields\n\nenssol: the EnsembleSolution of the associated ensemble problem in LagrangianDescriptorProblem.\nuu0: the collection of initial conditions given in \n\nthe LagrangianDescriptorProblem.\n\ndirection: the direction given in the LagrangianDescriptorProblem.\n\n\n\n\n\n","category":"type"},{"location":"api.html","page":"API","title":"API","text":"LagrangianDescriptors.solve","category":"page"},{"location":"api.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(prob::LagrangianDescriptorProblem, alg, args...; kwargs...)\n\nSolve a LagrangianDescriptorProblem, which amounts to solving the associated EnsembleProblem in prob.ensprob and returning a LagrangianDescriptorSolution.\n\nYou should provide the necessary args and the desired kwargs for solving the associated ensemble problem for the underlying Differential Equation problem.\n\n\n\n\n\n","category":"function"},{"location":"index.html#LagrangianDescriptors.jl-documentation","page":"Home","title":"LagrangianDescriptors.jl documentation","text":"","category":"section"},{"location":"index.html#About","page":"Home","title":"About","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The dynamics of evolutionary systems can be quite intricate. The method of Lagrangian Descriptors helps to visualize the complicate behavior of such systems and to make sense of it. In a recent article, Wiggins and and García-Garrido call it [a method for] painting the phase portrait (of a dynamical system) (see S. Wiggins and V. J. García-Garrido, Painting the Phase Portrait of a Dynamical System with the Computational Tool of Lagrangian Descriptors (AMS Notices, June/July 2022).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The method is akin to droping colored ink in a fluid flow, tracking the dye as it is transport by the flow, and revealing the pattern created after a certain period of time. The difference being that the color doesn't get diffused as in a real fluid, so the image doesn't get blurred and one gets a clearer picture.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It is similar to drawing a phase portrait, which displays a collection of orbits, but in this method each orbit is painted according to its dynamic behavior, better revealing the overall picture.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The image below, for instance, shows the dynamics of a periodically-forced Duffing equation, with a particular combination of parameters and near time t=0 (see Tutorial: Periodically-forced Duffing equation):","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Duffing)","category":"page"},{"location":"index.html#How-it-works","page":"Home","title":"How it works","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The package works by ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"taking a differential equation problem of a type defined by SciML/DifferentialEquations.jl, with a given time span (t_0 t_f);\ntaking an infinitesimal descriptor M=M(du u p t) that will be integrated along a solution u(t) = u(t u_0), to yield the forward Lagrangian descriptor L_mathrmfwd(u_0) = int_t_0^t_f M(du(t) u(t) p t)mathrmdt and, similarly, the backward Lagrangian descriptor L_mathrmbwd(u_0) = int_t_0^t_f M(du(-t) u(-t) p 2t_0 - t)mathrmdt, for a given initial condition u_0;\ngenerating an augmented problem of the same time and with four components, for solving the original equation forward and backward in time, and for solving the Lagrangian descriptors forward and backward in time, as well;\ncreating a LagrangianDescriptorProblem wrapping an EnsembleProblem for the augmented system and with a given collection uu_0 of initial conditions.\nsolving the wrapped ensemble problem and returning a LagrangianDescriptorSolution containing the associated collection of (forward and backward) Lagrangian descriptors values at the final time of the simulations (which is t_f for the forward components and 2t_0 - t_f for the backward ones).\nFinally, one can visualize either the forward, or the backward, or the sum, or even the difference, of the forward and backward Lagrangian descriptor with a plot recipe for the LagrangianDescriptorSolution.","category":"page"},{"location":"index.html#Current-state","page":"Home","title":"Current state","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The package is still in an embrionary phase and currently accepts differential equations of the type ODEProblem. Problems like SDEProblem and RODEProblem will be implemented soon. Other problems will come eventually.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The plot recipe works for some types of collections of initial conditions (e.g. a AbstractVector{<:Number} for scalar problems and AbstractMatrix{<:AbstractVector{<:Number}} for two-dimensional problems). More general and flexible plot recipes will also be implemented.","category":"page"},{"location":"index.html#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"JuliaDynamics/LagrangianDescriptors.jl is currently being developed by Ricardo M. S. Rosa, but contributors are welcome.","category":"page"},{"location":"index.html#Cite","page":"Home","title":"Cite","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Just cite the github repo JuliaDynamics/LagrangianDescriptors.jl for now, while the package is not yet registered.","category":"page"},{"location":"tutorial_ODEs.html#Ordinary-Differential-Equations","page":"ODEs","title":"Ordinary Differential Equations","text":"","category":"section"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"We considere, here, some examples of applying the Lagragian descriptor method to equations of the type ODEProblem.","category":"page"},{"location":"tutorial_ODEs.html#Periodically-forced-Duffing-equation","page":"ODEs","title":"Periodically-forced Duffing equation","text":"","category":"section"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"We start with an application of the method of Lagrangian descriptors to the periodically-forced Duffing equation","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"ddot x = x - x^3 + Asin(omega t)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"With LagrangianDescriptors.jl, we start by setting up the equation as an ODEProblem from SciML/DifferentialEquations.jl.","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"Next, we wrap that as a LagrangianDescriptorProblem from LagrangianDescriptors.jl, which we can solve as an ensemble problem.","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"Finally, we plot the result with the built-in plot recipe.","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"So we first load the relevant packages:","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"using OrdinaryDiffEq, Plots\nusing LinearAlgebra: norm\nusing LagrangianDescriptors","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"Next we set up the ODEProblem:","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"function f!(du, u, p, t)\n    x, y = u\n    A, ω = p\n    du[1] = y\n    du[2] = x - x^3 + A * cos(ω * t)\nend\n\nu0 = [0.5, 2.2]\ntspan = (0.0, 13.0)\nA = 0.3; ω = π; p = (A, ω)\n\nprob = ODEProblem(f!, u0, tspan, p)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"With the ODE problem setup, we choose an infinitesimal Lagrangian descriptor, a collection of initial conditions on the phase space, which is the region to be \"painted\", and finally we build the LagrangianDescriptorProblem:","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"M(du, u, p, t) = norm(du)\n\nuu0 = [[x, y] for y in range(-1.0, 1.0, length=301), x in range(-1.8, 1.8, length=301)]\n\nlagprob = LagrangianDescriptorProblem(prob, M, uu0)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"The Lagrangian descriptors are the time-integration of the infinitesimal descriptor along forward and backward solutions of the equation. They are integrated along with the solutions by \"solving\" the LagrangianDescriptorProblem, with an overload of the solve method from the SciML ecosystem:","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"lagsol = solve(lagprob, Tsit5())","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"With the solution at hand, we plot the Lagrangian descriptors to visualize the dynamics of the system:","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"plot(lagsol, title=\"Lagrangian descriptors for the forced Duffing equation \\$\\\\ddot x = x - x^3 + A\\\\sin(\\\\omega t)\\$\\nwith A=$A and ω=$ω\", titlefont=8, xlabel=\"\\$x\\$\", ylabel=\"\\$\\\\dot x\\$\")\n\nsavefig(\"img/duffing.png\")","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"(Image: Duffing)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"We may zoom closer to the origin to find the following \"painting\":","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"uu0 = [[x, y] for y in range(-0.6, 0.3, length=601), x in range(-0.2, 0.4, length=401)]\nlagprob = LagrangianDescriptorProblem(prob, M, uu0)\n\nlagsol = solve(lagprob, Tsit5());\n\nplot(lagsol, title=\"Lagrangian descriptors for the forced Duffing equation \\$\\\\ddot x = x - x^3 + A\\\\sin(\\\\omega t)\\$\\nwith A=$A and ω=$ω\", titlefont=8, xlabel=\"\\$x\\$\", ylabel=\"\\$\\\\dot x\\$\")\n\nsavefig(\"img/duffing2.png\")","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"(Image: Duffing)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"If we want to change parameters, we just remake the original ODEProblem (in the future I should add the option to remake the LagrangianDescriptorProblem itself.)","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"A = 5.0; ω = 2π; p = (A, ω);\nprob = remake(prob, p=p)\nuu0 = [[x, y] for y in range(-0.5, 0.2, length=501), x in range(-0.3, 0.2, length=401)]\nlagprob = LagrangianDescriptorProblem(prob, M, uu0)\n\nlagsol = solve(lagprob, Tsit5());\n\nplot(lagsol, title=\"Lagrangian descriptors for the forced Duffing equation \\$\\\\ddot x = x - x^3 + A\\\\sin(\\\\omega t)\\$\\nwith A=$A and ω=$ω\", titlefont=8, xlabel=\"\\$x\\$\", ylabel=\"\\$\\\\dot x\\$\")\n\nsavefig(\"img/duffing3.png\")","category":"page"},{"location":"tutorial_ODEs.html","page":"ODEs","title":"ODEs","text":"(Image: Duffing)","category":"page"}]
}
